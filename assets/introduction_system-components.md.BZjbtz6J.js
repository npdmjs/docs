import{_ as e,c as a,o,a1 as t}from"./chunks/framework.DZ20Tprd.js";const f=JSON.parse('{"title":"System Components","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/system-components.md","filePath":"introduction/system-components.md"}'),s={name:"introduction/system-components.md"},n=t('<h1 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h1><p>NPDM is not a monolith solution, but consists of a few modules, which of them has it&#39;s own role.</p><h2 id="npdm-core" tabindex="-1">@npdm/core <a class="header-anchor" href="#npdm-core" aria-label="Permalink to &quot;@npdm/core&quot;">​</a></h2><p>The <code>@npdm/core</code> package is the heart of the NPDM system. Its main part is <code>InMemoryDynamicLoader</code> class. Its responsibility is downloading and caching static assets from the NPM packages and resolving them by package name and version, and by given relative path.</p><p>This package is supposed to be a part of an NPDM server, which serves microfrontend deployables as static assets.</p><h2 id="npdm-express" tabindex="-1">@npdm/express <a class="header-anchor" href="#npdm-express" aria-label="Permalink to &quot;@npdm/express&quot;">​</a></h2><p><code>@npdm/express</code> is a package which allows to create router for the <a href="https://expressjs.com/" target="_blank" rel="noreferrer">Express</a> server application. The responsibility of such a router is to create endpoint to retrieving the assets from NPM packages by URL like <code>/{packageName}/{packageVersion}/{assetPath}</code>. This is something that allows deployment of multiple microfrontend version which can be reused for different applications.</p><h2 id="npdm-module-federation" tabindex="-1">@npdm/module-federation <a class="header-anchor" href="#npdm-module-federation" aria-label="Permalink to &quot;@npdm/module-federation&quot;">​</a></h2><p><code>@npdm/module-federation</code> provides interfaces to apply NP(D)M approach to Module Federation with usage of <a href="https://module-federation.io/guide/basic/runtime.html" target="_blank" rel="noreferrer">Federation Runtime</a>. It provides some methods which allows to publish remotes as NPM packages and retrieve them via NPDM server.</p><p>This package also introduces some approach to allow strict typing for each remote, so you can create strict specification about each package and align interfaces between it and a consumer modules using Typescript.</p>',10),r=[n];function i(c,p,d,m,h,l){return o(),a("div",null,r)}const _=e(s,[["render",i]]);export{f as __pageData,_ as default};
